---
title: "Lab01 - Descritiva"
format:
  html:
    toc: true
    code-fold: show
    embed-resources: true
---

Vamos agora brincar de séries temporais.

Um problema que precisamos enfrentar com séries temporais é que como os dados têm uma ordem, precisamos de alguma forma ter essa ordem escrita na base.

Além disso, a ordem é pelo tempo, que é algo que tras informação por si só. Por exemplo, se estamos com uma série temporal de vendas, é natural pensar que certas épocas do ano vendam mais que outras, e que isso se repita ano a ano.

Por isso, uma base de dados de série temporal precisa saber lidar com essa natureza de dados.

# Bases de dados

Existem diversos pacotes utilizados para armazenar séries temporais no R. Veremos 3:

-   `{base}`: dá para fazer muita coisa só com o base/stats, então você verá bastante código desse tipo por aí.

-   `{xts}` / `{zoo}`: serve para organizar uma base de dados no formato de série temporal.

-   `{tsibble}`: é a versão *tidy*, mais recente (2017).

## Base R

Historicamente, isso era feito pela função `ts()`, que funciona assim:

```{r}
set.seed(1)

# simulaçao de dados com um arima
dados <- data.frame(
  mes = 1:48,
  vendas = arima.sim(list(order = c(1,1,0), ar = 0.7), n = 48)[-1]
)

plot(dados)

```

```{r}
# mesma base de dados, mas lendo do github
dados <- readr::read_csv("https://github.com/padsInsper/202307-fa/raw/main/dados_lab01.csv")
plot(dados)
```

```{r}
dados_ts <- ts(dados)
# agora o eixo x não é mais o mês!
plot(dados_ts)
```

```{r}
plot(dados_ts[,"vendas"])
```

Agora vamos definir uma periodicidade

```{r}
dados_ts <- ts(
  dados,
  start = c(2005, 6), # começa no mês 6
  frequency = 12 # um ciclo a cada 12 observações (anual)
)

plot(dados_ts[,"vendas"])
```

Também funciona

```{r}
dados_ts <- ts(
  dados,
  start = c(2005, 6), # começa no mês 6
  deltat = 1/12
)

plot(dados_ts[,"vendas"])
```

Versão ggplot, usando pacote forecast (veremos adiante)

```{r}
forecast::autoplot(dados_ts[,"vendas"]) +
  ggplot2::theme_minimal()
```

## xts

O `{xts}` é uma versão mais "parruda" do `ts()`, criado para resolver algumas dificuldades dos objetos. Ganhou muita popularidade nos entre 2000-2015 e é usado como base para uma série de modelos.

Atualmente, o xts não é mais necessário para trabalhar com séries temporais. No entanto, é muito comum encontrá-lo em códigos de modelagem mais "roots", construídos por pessoas que aprenderam com base R.

```{r}
dados_xts <- xts::as.xts(dados_ts)
plot(dados_xts[,"vendas"])

forecast::autoplot(dados_xts[,"vendas"])
```

Obs: outro pacote que você encontrará por aí é o `{zoo}`, mas ele é tão esquisito que não vale a pena estudá-lo. Se você encontrar código que usa o zoo e precisar reproduzir, recomendo que estude as funções de forma individualizada. O `{xts}` é uma forma de melhorar o `{zoo}`.

## tsibble

As `tsibble`s ([tsibble.tidyverts.org](https://tsibble.tidyverts.org)) são a versão tidy das séries temporais, e também a versão séries temporais das amadas tibbles. Pegando o exemplo anterior, temos

```{r, error=TRUE}
tsibble::tsibble(
  mes = dados$mes,
  vendas = dados$vendas
)
```

Isso significa precisamos passar um índice, obrigatoriamente. O `{xts}` faz isso modificando o objeto, enquanto que a `tsibble` faz isso com uma coluna

```{r}
dados_tsibble <- tsibble::tsibble(
  mes = dados$mes,
  vendas = dados$vendas,
  index = mes
)
dados_tsibble
```

outra alternativa:

```{r}
dados_tsibble <- dados |>
  tsibble::as_tsibble(index = mes)
```

Para dar a periodicidade, modificamos a coluna que indexa os dados, similar ao que faz o xts, mas de forma mais explícita:

```{r}
# tsibble::yearmonth(1) +4 + 12*35

# tsibble::yearmonth(as.Date("2005-06-01"))

dados_tsibble <- dados |>
  dplyr::mutate(
    mes = tsibble::yearmonth(mes),
    # se o mes fosse uma data, isso seria mais facil
    mes = mes + 12*35 + 4
  ) |>
  tsibble::as_tsibble(index = mes)

dados_tsibble
```

```{r}
# outra forma
dados_tsibble <- dados |>
  dplyr::mutate(
    mes = as.Date("2005-05-01") + months(mes),
    mes = tsibble::yearmonth(mes)
  ) |>
  tsibble::as_tsibble(index = mes)

dados_tsibble
```

Finalmente, para plotar:

```{r}
feasts::autoplot(dados_tsibble, vendas)
```

## Python

```{python}
import pandas as pd
from datetime import timedelta
import matplotlib.pyplot as plt
import seaborn as sns

dados = pd.read_csv(
  "https://github.com/padsInsper/202307-fa/raw/main/dados_lab01.csv"
)

dados.plot()
dados.info()

dates = pd.date_range("2005-06-01", periods = 48, freq = "M")

serie_dados = pd.Series(dados['vendas'].array, index = dates)
serie_dados.plot()
```

```{python}
sns.lineplot(data = serie_dados)
# set x axis label 45 degrees
plt.xticks(rotation=45, ha='right')

```

# Estatísticas básicas

## base R

### decomposição

```{r}
dec_sum <- decompose(dados_ts[,"vendas"])
dec_mult <- decompose(dados_ts[,"vendas"], "multiplicative")
plot(dec_sum)
plot(dec_mult)

set.seed(7)
dados_turnover <- tsibbledata::aus_retail |>
  dplyr::filter(
    `Series ID` %in% sample(`Series ID`, 2)
  ) |>
  dplyr::select(Month, Turnover)

x <- ts(dados_turnover, start = c(1982, 4), frequency = 12)
plot(decompose(x[,"Turnover"], "multiplicative"))
plot(decompose(x[,"Turnover"]))
```

$$Y = T + S + e$$

$$log(Y) = log(T) + log(S) + log(e)$$

```{r}
dados_exemplos <- data.frame(
  mes = 1:48,
  vendas = arima.sim(list(order = c(1,0,0), ar = c(0.8)), n = 48)
)

dados_ts_exemplos <- ts(dados_exemplos)
acf(dados_ts_exemplos[,"vendas"])
```

```{r}
pacf(dados_ts[,"vendas"])
```

## forecast

O pacote `{forecast}` é uma das ferramentas mais usadas no dia-a-dia de quem trabalha com séries temporais.

Construído antes do tidymodels, trata-se de um pacote com diversos modelos para lidar com séries temporais, mas ainda fora do ambiente "tidy". O livro-base para uso do forecast é o FPP2 (https://otexts.com/fpp2/).

Atualmente, temos o FPP3 com alternativas "tidy", mas isso não implica que o forecast cairá em desuso, pois ele é muito bom.

Por enquanto veremos só a parte descritiva. No próximo lab, trabalharemos com modelagem.

```{r}
fit_ets <- forecast::ets(dados_ts[,"vendas"])
forecast::autoplot(fit_ets)
```

```{r}
forecast::ggseasonplot(dados_ts[,"vendas"]) +
  ggplot2::scale_colour_brewer() +
  ggplot2::theme_minimal()
```

```{r}
forecast::ggseasonplot(dados_ts[,"vendas"], polar = TRUE)
```

Mais exemplos no FPP2.

Autocorrelação

```{r}
library(forecast)
forecast::ggAcf(dados_ts[,"vendas"])
```

```{r}
forecast::ggPacf(dados_ts[,"vendas"])
```

## feasts

O `feasts` é o pacote atual para análise descritiva de séries temporais. Ele é descrito no FPP3 (https://otexts.com/fpp3/) e está alinhado com os princípios tidy.

Season plot

```{r}
dados_tsibble |>
  feasts::gg_season(y = vendas)
```

```{r}
dados_tsibble |>
  feasts::gg_season(y = vendas, polar = TRUE)
```

Mais exemplos no FPP3.

```{r}
dados_tsibble |>
  feasts::ACF(vendas) |>
  feasts::autoplot()
```

```{r}
dados_tsibble |>
  feasts::PACF(vendas) |>
  feasts::autoplot()
```

```{r}
dados_tsibble |>
  feasts::gg_lag(vendas, geom = "point")
```

Para pegar os componentes de forma tidy:

```{r}
dados_tsibble |>
  fabletools::model(feasts::STL(vendas)) |>
  fabletools::components() |>
  feasts::autoplot()
```

## Python

```{python}
import statsmodels.api as sm

res = sm.tsa.seasonal_decompose(serie_dados)
resplot = res.plot()
plt.show()
```

## Exercícios

Link: https://otexts.com/fpp3/graphics-exercises.html Faça os exercícios 3, 8, 10, 12



