---
title: "Lab01 - Modelagem"
format:
  html:
    toc: true
    code-fold: show
    embed-resources: true
engine: jupyter
---


```{python}
import pandas as pd
1+1
```

```{r}
library(fpp3)

# mesma base de dados, mas lendo do github
dados <- readr::read_csv("https://github.com/padsInsper/202307-fa/raw/main/dados_lab01.csv")
plot(dados)

dados_ts <- ts(dados)

# outra forma
dados_tsibble <- dados |>
  dplyr::mutate(
    mes = as.Date("2005-05-01") + months(mes),
    mes = tsibble::yearmonth(mes)
  ) |>
  tsibble::as_tsibble(index = mes)

```

```{r}
dados_tsibble |>
  autoplot(vendas)
```


## feasts (revisão)

O `feasts` é o pacote atual para análise descritiva de séries temporais. Ele é descrito no FPP3 (https://otexts.com/fpp3/) e está alinhado com os princípios tidy.

Season plot

```{r}
dados_tsibble |>
  gg_season(vendas)
```

```{r}
dados_tsibble |>
  gg_season(vendas, polar = TRUE)
```

```{r}
# decompose(dados_tsibble$vendas)
dados_tsibble |>
  model(
    stl = STL(vendas)
  ) |>
  components() |>
  autoplot()
```

Mais exemplos no FPP3.

ACF e PACF

```{r}
dados_tsibble |>
  mutate(vendas_dif = difference(vendas)) |>
  autoplot(vendas_dif)
```

```{r}
dados_tsibble |>
  mutate(vendas_dif = difference(vendas)) |>
  ACF(vendas_dif) |>
  autoplot()

```

```{r}

#acf()
#forecast::Acf()

# Usamos ACF para identificar a ordem do modelo ARIMA
# na parte de AR
dados_tsibble |>
  ACF(vendas) |>
  autoplot()

# Um cuidado a tomar na ACF é que, se ela apresenta um
# aspecto de decaimento exponencial, isso pode ser
# devido a uma tendência na série. Nesse caso, é melhor
# usar a ACF da série diferenciada.
```

A PACF é calculada da seguinte forma: a correlação parcial entre $y_t$ e $y_{t-k}$ é a correlação entre $y_t$ e $y_{t-k}$, removendo o efeito de $y_{t-1}$, $y_{t-2}$, ..., $y_{t-k+1}$.

```{r}
# Usamos PACF para identificar a ordem do modelo ARIMA
# na parte de MA
dados_tsibble |>
  PACF(vendas) |>
  autoplot()
```

```{r}
dados_tsibble |>
  gg_tsdisplay(vendas)
```

```{r}
dados_tsibble |>
  gg_tsdisplay(vendas, plot_type = "partial")
```

```{r}
dados_tsibble |>
  mutate(vendas_dif = difference(vendas)) |>
  gg_tsdisplay(vendas_dif, plot_type = "partial")
```

# Forecasts simples

## pacote forecast

```{r}
dados_ts_vendas <- dados_ts[,"vendas"]

media <- forecast::meanf(dados_ts_vendas, 5)
naive <- forecast::naive(dados_ts_vendas, 5)
seasonal_naive <- forecast::snaive(dados_ts_vendas, 5)
drift <- forecast::rwf(dados_ts_vendas, 5, drift = TRUE)
```

```{r}
dados_ts_vendas |>
  forecast::autoplot() +
  forecast::autolayer(media, series = "Media", PI = FALSE) +
  forecast::autolayer(naive, series = "Naive", PI = FALSE) +
  forecast::autolayer(seasonal_naive, series = "SNaive", PI = FALSE) +
  forecast::autolayer(drift, series = "Drift", PI = FALSE)
```

## pacote feasts

Média móvel

Modelos que vimos no forecast

```{r}
dados_para_modelo <- dados_tsibble |>
  tsibble::filter_index("2005 jun" ~ "2008 dec")

modelos <- dados_para_modelo |>
  fabletools::model(
    mean = fable::MEAN(vendas),
    naive = fable::NAIVE(vendas),
    snaive = fable::SNAIVE(vendas),
    drift = fable::RW(vendas ~ drift())
  ) |>
  fabletools::forecast(h = 10)

modelos |>
  feasts::autoplot(dados_para_modelo, level = NULL)
```

# Prophet

## R

Forecast

```{r}

library(prophet)

dados_prophet <- dados |>
  transmute(
    ds = as.Date("2005-05-01") + months(mes),
    y = vendas
  )

m <- prophet(dados_prophet)
futuro <- make_future_dataframe(
  m, periods = 12, freq = "month"
)

forecast <- predict(m, futuro)

plot(m, forecast)

```

Componentes

```{r}

prophet_plot_components(m, forecast)

```


## Python

```{python}
from prophet import Prophet
import pandas as pd

dados = pd.read_csv("https://github.com/padsInsper/202307-fa/raw/main/serie_temporal.csv")
```

```{python}
m = Prophet()
m.fit(dados)

# make future dataframe
future = m.make_future_dataframe(periods=12, freq='MS')

# predict method
forecast = m.predict(future)
m.plot(forecast)
```

# Exercício em sala

Faça a análise da série que está nesse link: https://raw.githubusercontent.com/padsInsper/202234-fa/main/material/lab01/serie_temporal.csv

```{r}
dados  <- readr::read_csv("https://raw.githubusercontent.com/padsInsper/202234-fa/main/material/lab01/serie_temporal.csv")

dados_tsibble <- dados |>
  tsibble::as_tsibble(index = ds)
```

1.  plotar a série

```{r}
dados_tsibble |>
  autoplot(y)
```

2.  plotar os gráficos sazonais

```{r}
dados_tsibble |>
  gg_season(y)
```

3.  Decomposição tradicional (base R) e STL

```{r}
dados_ts <- ts(dados$y, start = c(2000), freq = 365)
decompose(dados_ts) |>
  plot()
```

```{r}
dados_tsibble |>
  model(
    stl = STL(y)
  ) |>
  components() |>
  autoplot()
```

4.  ACF e PACF

```{r}
dados_tsibble |>
  gg_tsdisplay(y, plot_type = "partial")
```

```{r}
dados_tsibble |>
  fabletools::features(
    y,
    list(
      feasts::unitroot_kpss,
      feasts::unitroot_ndiffs
    )
  )
```

```{r}
dados_tsibble |>
  mutate(y_dif = difference(y)) |>
  gg_tsdisplay(y_dif, plot_type = "partial")
```

```{r}
dados_tsibble |>
  mutate(y_dif = difference(y)) |>
  fabletools::features(
    y_dif,
    list(
      feasts::unitroot_kpss,
      feasts::unitroot_ndiffs
    )
  )
```

```{r}


fit <- dados_tsibble |>
  fabletools::model(
    # arima_manual = fable::ARIMA(vendas ~ 1 + pdq(2,0,2) + PDQ(0,0,0)),
    stepwise = fable::ARIMA(),
    search = fable::ARIMA(stepwise = FALSE)
  )

fit

```


5.  Gráficos com as diferenças
6.  Previsão usando naive, drift, snaive etc

```{r}
dados_tsibble |>
  fabletools::model(
    mean = fable::MEAN(y),
    naive = fable::NAIVE(y),
    snaive = fable::SNAIVE(y),
    drift = fable::RW(y ~ drift())
  ) |>
  fabletools::forecast(h = 2000) |>
  feasts::autoplot(dados_tsibble, level = NULL)
```

7.  Previsão usando o prophet, testando diferentes parâmetros


```{r}

m <- prophet(dados)
futuro <- make_future_dataframe(
  m, periods = 200
)

forecast <- predict(m, futuro)

plot(m, forecast)
```

## Exercícios do livro

**Ler**: https://otexts.com/fpp3/accuracy.html

**Link**: https://otexts.com/fpp3/toolbox-exercises.html

Faça os exercícios 2, 6
